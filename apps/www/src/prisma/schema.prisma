generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model users {
  id        String     @id @default(cuid()) @map("_id")
  name      String
  email     String     @unique
  avatarUrl String?
  password  String?
  bio       String?
  session   sessions[]
  blogs     blogs[]
  likes     likes[]
  comments  comments[]

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  comment_replies comment_replies[]
}

type info {
  os             String?
  browser        String?
  browserVersion String?
  location       String?
}

model sessions {
  id        String   @id @default(cuid()) @map("_id")
  userId    String
  ip        String
  info      info
  expiresAt DateTime
  createdAt DateTime @default(now())

  user users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "session_userId_fkey")
}

model blogs {
  id          String     @id @map("_id")
  title       String
  description String
  content     String
  coverUrl    String
  authorId    String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  likes       likes[]
  comments    comments[]

  author users @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([authorId])
}

model likes {
  id        String   @id @default(cuid()) @map("_id")
  blogId    String
  userId    String
  createdAt DateTime @default(now())

  blog blogs @relation(fields: [blogId], references: [id], onDelete: Cascade)
  user users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([blogId, userId])
  @@index([blogId])
  @@index([userId])
}

model comments {
  id        String   @id @default(cuid()) @map("_id")
  blogId    String
  userId    String
  content   String
  createdAt DateTime @default(now())

  author          users             @relation(fields: [userId], references: [id], onDelete: Cascade)
  blog            blogs             @relation(fields: [blogId], references: [id], onDelete: Cascade)
  comment_likes   comment_likes[]
  comment_replies comment_replies[]

  @@index([blogId])
  @@index([userId])
}

model comment_replies {
  id        String   @id @default(cuid()) @map("_id")
  userId    String
  parentId  String
  content   String
  createdAt DateTime @default(now())

  author        users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentComment comments @relation(fields: [parentId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([parentId])
}

model comment_likes {
  id        String   @id @default(cuid()) @map("_id")
  commentId String
  userId    String
  createdAt DateTime @default(now())

  comment comments @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
  @@index([userId])
  @@index([commentId])
}
